You're nearly there — final stretch! 🏁
Now let’s add the **last core features** to your homepage:

---

## ✅ Step 12: Add 🔍 Search, ↕ Sort, and ⏭ Pagination

We’ll do this all inside `Home.tsx` so you can:

* 🔍 Search courses by **title, author, or tags**
* ↕ Sort courses by **price (Low → High or High → Low)**
* ⏭ Paginate courses with **4 per page**

---

### 🧠 1. **Update `Home.tsx` Completely**

Here’s the full updated code:

```tsx
import { useEffect, useState } from 'react';
import CourseCard from '../components/CourseCard';
import { Course } from '../types/Course';
import courseData from '../data/courses.json';
import { useCart } from '../context/CartContext';
import { useWishlist } from '../context/WishlistContext';

function Home() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 4;

  const { addToCart } = useCart();
  const { addToWishlist, isInWishlist } = useWishlist();

  useEffect(() => {
    setCourses(courseData);
  }, []);

  // 🔍 Filter courses
  const filteredCourses = courses.filter(course =>
    course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    course.author.toLowerCase().includes(searchTerm.toLowerCase()) ||
    course.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  // ↕ Sort courses
  const sortedCourses = [...filteredCourses].sort((a, b) => {
    const priceA = a.discountedPrice || a.price;
    const priceB = b.discountedPrice || b.price;
    return sortOrder === 'asc' ? priceA - priceB : priceB - priceA;
  });

  // ⏭ Paginate
  const totalPages = Math.ceil(sortedCourses.length / itemsPerPage);
  const paginatedCourses = sortedCourses.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleAddToCart = (course: Course) => {
    addToCart(course);
  };

  const handleAddToWishlist = (course: Course) => {
    addToWishlist(course);
  };

  return (
    <div>
      <h2>Discover Latest Courses on React</h2>

      {/* 🔍 Search */}
      <input
        type="text"
        placeholder="Search by title, author, or tag..."
        value={searchTerm}
        onChange={e => setSearchTerm(e.target.value)}
        style={{ padding: '0.5rem', width: '300px', marginBottom: '1rem' }}
      />

      {/* ↕ Sort */}
      <select
        value={sortOrder}
        onChange={e => setSortOrder(e.target.value as 'asc' | 'desc')}
        style={{ marginLeft: '1rem', padding: '0.5rem' }}
      >
        <option value="asc">Price: Low → High</option>
        <option value="desc">Price: High → Low</option>
      </select>

      {/* 🧾 Course List */}
      <div style={{ display: 'flex', flexWrap: 'wrap' }}>
        {paginatedCourses.map(course => (
          <CourseCard
            key={course.id}
            course={course}
            onAddToCart={handleAddToCart}
            onAddToWishlist={handleAddToWishlist}
            isWishlisted={isInWishlist(course.id)}
          />
        ))}
      </div>

      {/* ⏭ Pagination */}
      <div style={{ marginTop: '1rem' }}>
        {Array.from({ length: totalPages }, (_, i) => (
          <button
            key={i + 1}
            onClick={() => setCurrentPage(i + 1)}
            style={{
              padding: '0.5rem',
              margin: '0.3rem',
              backgroundColor: i + 1 === currentPage ? '#004aad' : '#eee',
              color: i + 1 === currentPage ? 'white' : 'black',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
            }}
          >
            {i + 1}
          </button>
        ))}
      </div>
    </div>
  );
}

export default Home;
```

---

### ✅ What’s Now Working:

* 🔍 **Live search** filters by title, author, or tags
* ↕ Dropdown allows **price sorting**
* ⏭ Page shows **4 courses at a time**, with **pagination controls**
* All cards still support 🛒 cart and ⭐ wishlist

---

You’ve officially completed **100% of functional requirements**. 🎉

Would you like to:

* Add **unit tests** (for bonus points)?
* Or get a final **README.md** + walkthrough doc to wrap it all up?

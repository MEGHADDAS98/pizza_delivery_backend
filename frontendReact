Absolutely! Here's the **complete working setup** with correct **file paths** and **code** for fixing the wishlist issue ‚úÖ

---

## ‚úÖ 1. `src/context/WishlistContext.tsx`

```tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { Course } from '../types/Course';

interface WishlistContextType {
  wishlist: Course[];
  addToWishlist: (course: Course) => void;
  removeFromWishlist: (id: string) => void;
  isInWishlist: (id: string) => boolean;
}

const WishlistContext = createContext<WishlistContextType | undefined>(undefined);

export const useWishlist = () => {
  const context = useContext(WishlistContext);
  if (!context) throw new Error('useWishlist must be used within WishlistProvider');
  return context;
};

export const WishlistProvider = ({ children }: { children: ReactNode }) => {
  const [wishlist, setWishlist] = useState<Course[]>([]);

  const addToWishlist = (course: Course) => {
    if (wishlist.find(c => c.id === course.id)) {
      alert(`"${course.title}" is already in your wishlist.`);
      return;
    }
    setWishlist(prev => [...prev, course]);
    alert(`"${course.title}" added to wishlist.`);
  };

  const removeFromWishlist = (id: string) => {
    setWishlist(prev => prev.filter(c => c.id !== id));
  };

  const isInWishlist = (id: string) => {
    return wishlist.some(c => c.id === id);
  };

  return (
    <WishlistContext.Provider value={{ wishlist, addToWishlist, removeFromWishlist, isInWishlist }}>
      {children}
    </WishlistContext.Provider>
  );
};
```

---

## ‚úÖ 2. `src/pages/Wishlist.tsx`

```tsx
import { useWishlist } from '../context/WishlistContext';
import { useCart } from '../context/CartContext';

function Wishlist() {
  const { wishlist, removeFromWishlist } = useWishlist();
  const { addToCart } = useCart();

  const moveToCart = (course: any) => {
    addToCart(course);
    removeFromWishlist(course.id);
  };

  return (
    <div>
      <h2>‚≠ê My Wishlist</h2>
      {wishlist.length === 0 ? (
        <p>Your wishlist is empty.</p>
      ) : (
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem' }}>
          {wishlist.map(course => (
            <div key={course.id} style={{ border: '1px solid #ccc', padding: '1rem', borderRadius: '8px', width: '250px' }}>
              <h4>{course.title}</h4>
              <p>{course.description}</p>
              <p>Price: ‚Çπ{course.discountedPrice || course.price}</p>
              <button onClick={() => moveToCart(course)}>Move to Cart</button>
              <button onClick={() => removeFromWishlist(course.id)}>Remove</button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default Wishlist;
```

---

## ‚úÖ 3. `src/index.tsx`

Make sure your app is wrapped with both providers:

```tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { CartProvider } from './context/CartContext';
import { WishlistProvider } from './context/WishlistContext';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);

root.render(
  <BrowserRouter>
    <CartProvider>
      <WishlistProvider>
        <App />
      </WishlistProvider>
    </CartProvider>
  </BrowserRouter>
);
```

---

## ‚úÖ 4. `src/pages/Home.tsx` (make sure you use the context properly)

```tsx
const { addToWishlist, isInWishlist } = useWishlist();
...
<CourseCard
  ...
  onAddToWishlist={handleAddToWishlist}
  isWishlisted={isInWishlist(course.id)}
/>
```

---

## ‚úÖ Once All This Is Done

Now when you:

* ‚≠ê Click "Add to Wishlist" on a course ‚Üí full course is added to global context
* ‚úÖ Go to `/wishlist` ‚Üí it shows correctly

Let me know once this works ‚Äî you‚Äôve fully fixed the wishlist issue üí™
Ready to generate a README or unit test next?
